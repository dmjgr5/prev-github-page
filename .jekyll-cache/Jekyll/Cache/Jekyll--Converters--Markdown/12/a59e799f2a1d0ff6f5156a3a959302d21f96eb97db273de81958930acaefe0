I"<p><img src="/assets/images/python.png" alt="example" /></p>

<blockquote>
  <p>This is the document for Python, which is basic instruction like Python Installation, Data Types and so on. Let me explain briefly about Python language.</p>
</blockquote>

<hr />

<h3 id="python-installation">Python Installation</h3>

<ul>
  <li>Using python IDLE <a href="https://www.python.org/">https://www.python.org</a></li>
  <li>Using Visual Studio Code after extension installation [https://code.visualstudio.com] (https://code.visualstudio.com/)</li>
</ul>

<h3 id="python-type">Python Type</h3>

<ul>
  <li>List [ ]
    <ul>
      <li>Ordered List</li>
    </ul>
  </li>
  <li>Tuple ( )
    <ul>
      <li>Ordered List, not changed</li>
    </ul>
  </li>
  <li>Set { }
    <ul>
      <li>Type with Set (used with Union, Intersection, Difference)</li>
    </ul>
  </li>
  <li>Dictionary {“key”:”value”}
    <ul>
      <li>Paired with Key and Value, No ordered list</li>
    </ul>
  </li>
</ul>

<h3 id="shallow-copy-and-deep-copy">Shallow Copy and Deep Copy</h3>

<ul>
  <li>Shallow Copy
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1,2,3]
b =a

import copy

a = [1,2,3]
b = copy.copy(a)
</code></pre></div>    </div>
  </li>
  <li>Deep Copy
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1,2,3]
b = a[:]  

import copy

a = [1,2,3]
b = copy.deepcopy(a)   
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="garbage-collection">Garbage Collection</h3>
<ul>
  <li>The data type of int, float, complex, String and tuple are immutable, therefore if the variable is updated, it make another new object, so old object which is not used, garbage collection executed. Mostly list and dictionary used because it is mutable type.
The immutable type and global variable should be used with ‘global’ to update its value.</li>
  <li>Test
```
    <blockquote>
      <blockquote>
        <blockquote>
          <p>g = 1
def testScope(a):
  global g
  g = 2
  return g + a</p>
        </blockquote>
      </blockquote>
    </blockquote>
  </li>
</ul>

<p>print(“testScoope(1) : “, testScoope(1))
print(“g : “,g)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Output
</code></pre></div></div>
<p>testScoope(1) :  3
g :  1</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
### Variable Parameter
- Any number of parameters can be used by adding * (different a pointer from C)in front of parameters


</code></pre></div></div>
<blockquote>
  <blockquote>
    <blockquote>
      <p>def test(*args):
    print(type(args))</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>test(1, 2)</p>
    </blockquote>
  </blockquote>
</blockquote>
<p>&lt;type ‘tuple’&gt; # tuple type</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>def union(*ar):
    res = []
    for item in ar:
        for x in item:
            if not x in res:
                res.append(x)
    return res</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>union(“HAM”, “EGG”, “SPAM”)
[‘H’, ‘A’, ‘M’, ‘E’, ‘G’, ‘S’, ‘P’]</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>union(“gir”, “generation”, “gee”)
[‘g’, ‘i’, ‘r’, ‘e’, ‘n’, ‘a’, ‘t’, ‘o’]
```</p>
    </blockquote>
  </blockquote>
</blockquote>

<ul>
  <li>Any number of parameters (key-value type) can be used by adding ** in front of parameters.
It is option where it requires or not. Option parameter is handled as a dictionary type.
```
    <blockquote>
      <blockquote>
        <blockquote>
          <p>def userURIBuilder(server, port, **user):
  str = “http://” + server + “:” + port + “/?”
  for key in user.keys():
      str += key + “=” + user[key] + “&amp;”
  return str</p>
        </blockquote>
      </blockquote>
    </blockquote>
  </li>
</ul>

<blockquote>
  <blockquote>
    <blockquote>
      <p>userURIBuilder(“test.com”, “8080”, id=’userid’, passwd=’1234’)
‘http://test.com:8080/?passwd=1234&amp;id=userid&amp;’
userURIBuilder(“test.com”, “8080”, id=’userid’, passwd=’1234’, name=’mike’, age=’20’)
‘http://test.com:8080/?passwd=1234&amp;age=20&amp;id=userid&amp;name=mike&amp;’
```</p>
    </blockquote>
  </blockquote>
</blockquote>

<h3 id="lambda-function">Lambda Function</h3>
<ul>
  <li>There is no name, anonymous function. In case of sample function, it is better to use lambda function.</li>
  <li>Example : lambda <parameters> : <phrase>
</phrase></parameters>    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; g = lambda x, y : x * y
&gt;&gt;&gt; g(2,3)
6
&gt;&gt;&gt; (lambda x: x * x)(3)
9
</code></pre></div>    </div>
  </li>
</ul>

:ET