I"p8<p><img src="/assets/images/python.png" alt="example" /></p>

<blockquote>
  <p>This is the document for Python, which is basic instruction like Python Installation, Data Types and so on. Let me explain briefly about Python language.</p>
</blockquote>

<hr />

<h3 id="python-installation">Python Installation</h3>

<ul>
  <li>Using python IDLE <a href="https://www.python.org/">https://www.python.org</a></li>
  <li>Using Visual Studio Code after extension installation [https://code.visualstudio.com] (https://code.visualstudio.com/)</li>
</ul>

<h3 id="python-type">Python Type</h3>

<ul>
  <li>List [ ]
    <ul>
      <li>Ordered List</li>
    </ul>
  </li>
  <li>Tuple ( )
    <ul>
      <li>Ordered List, not changed</li>
    </ul>
  </li>
  <li>Set { }
    <ul>
      <li>Type with Set (used with Union, Intersection, Difference)</li>
    </ul>
  </li>
  <li>Dictionary {“key”:”value”}
    <ul>
      <li>Paired with Key and Value, No ordered list</li>
    </ul>
  </li>
</ul>

<h3 id="shallow-copy-and-deep-copy">Shallow Copy and Deep Copy</h3>

<ul>
  <li>Shallow Copy
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1,2,3]
b =a

import copy

a = [1,2,3]
b = copy.copy(a)
</code></pre></div>    </div>
  </li>
  <li>Deep Copy
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1,2,3]
b = a[:]  

import copy

a = [1,2,3]
b = copy.deepcopy(a)   
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="garbage-collection">Garbage Collection</h3>
<ul>
  <li>The data type of int, float, complex, String and tuple are immutable, therefore if the variable is updated, it make another new object, so old object which is not used, garbage collection executed. Mostly list and dictionary used because it is mutable type.
The immutable type and global variable should be used with ‘global’ to update its value.</li>
  <li>Test
```
    <blockquote>
      <blockquote>
        <blockquote>
          <p>g = 1
def testScope(a):
  global g
  g = 2
  return g + a</p>
        </blockquote>
      </blockquote>
    </blockquote>
  </li>
</ul>

<p>print(“testScoope(1) : “, testScoope(1))
print(“g : “,g)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Output
</code></pre></div></div>
<p>testScoope(1) :  3
g :  1</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
### Variable Parameter
- Any number of parameters can be used by adding * (different a pointer from C)in front of parameters


</code></pre></div></div>
<blockquote>
  <blockquote>
    <blockquote>
      <p>def test(*args):
    print(type(args))</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>test(1, 2)</p>
    </blockquote>
  </blockquote>
</blockquote>
<p>&lt;type ‘tuple’&gt; # tuple type</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>def union(*ar):
    res = []
    for item in ar:
        for x in item:
            if not x in res:
                res.append(x)
    return res</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>union(“HAM”, “EGG”, “SPAM”)
[‘H’, ‘A’, ‘M’, ‘E’, ‘G’, ‘S’, ‘P’]</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>union(“gir”, “generation”, “gee”)
[‘g’, ‘i’, ‘r’, ‘e’, ‘n’, ‘a’, ‘t’, ‘o’]
```</p>
    </blockquote>
  </blockquote>
</blockquote>

<ul>
  <li>Any number of parameters (key-value type) can be used by adding ** in front of parameters.
It is option where it requires or not. Option parameter is handled as a dictionary type.
```
    <blockquote>
      <blockquote>
        <blockquote>
          <p>def userURIBuilder(server, port, **user):
  str = “http://” + server + “:” + port + “/?”
  for key in user.keys():
      str += key + “=” + user[key] + “&amp;”
  return str</p>
        </blockquote>
      </blockquote>
    </blockquote>
  </li>
</ul>

<blockquote>
  <blockquote>
    <blockquote>
      <p>userURIBuilder(“test.com”, “8080”, id=’userid’, passwd=’1234’)
‘http://test.com:8080/?passwd=1234&amp;id=userid&amp;’
userURIBuilder(“test.com”, “8080”, id=’userid’, passwd=’1234’, name=’mike’, age=’20’)
‘http://test.com:8080/?passwd=1234&amp;age=20&amp;id=userid&amp;name=mike&amp;’
```</p>
    </blockquote>
  </blockquote>
</blockquote>

<h3 id="lambda-function">Lambda Function</h3>
<ul>
  <li>There is no name, anonymous function. In case of sample function, it is better to use lambda function.</li>
  <li>Example : lambda <parameters> : <phrase>
</phrase></parameters>    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; g = lambda x, y : x * y
&gt;&gt;&gt; g(2,3)
6
&gt;&gt;&gt; (lambda x: x * x)(3)
9
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="yield">yield</h3>
<ul>
  <li>returns value in real time, used in RANGE phrase.
```
    <blockquote>
      <blockquote>
        <blockquote>
          <p>def reverse(data):
  for index in range(len(data) - 1, -1, -1):
      yield data[index]</p>
        </blockquote>
      </blockquote>
    </blockquote>
  </li>
</ul>

<blockquote>
  <blockquote>
    <blockquote>
      <p>for char in reverse(‘gold’):
    print(char)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>d
l
o
g</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
### Private Member
- `Add __&lt;member variable&gt;, changed _&lt;className&gt;__&lt;memberName&gt;`
</code></pre></div></div>
<p>class BankAccount:
def <strong>init</strong>(self, id, name, balance):</p>

<p>self. __ id = id
self. __ name = name 
self. __ balance = balance 
def deposit(self, amount):
 self. __ balance += amount 
def withdraw(self, amount):
 self. __ balance -= amount
def <strong>str</strong>(self):
 return “{0}, {1}, {2}”.format(self.__id, self.__name, <br />
         self.__balance)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
### Inheritance
- Example : Class Student(Person):
</code></pre></div></div>
<p>class Person:
  …</p>

<p>class Student(Person):
    “"”sub class”””
    def <strong>init</strong>(self, name, phoneNumber, subject, studentID):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Person.__init__(self, name, phoneNumber) # Call Person Init 
    self.subject = subject
    self.studentID = studentID ```
</code></pre></div></div>

<h3 id="pythonpath-in-system-variables">PYTHONPATH in System Variables</h3>
<ul>
  <li>
    <p>When creating module, we can allocate the module location in specific folder using system properties path named as PYTHONPATH and the absolute path.
Classes and Functions can be defined in Module.</p>
  </li>
  <li>
    <p>Module example
```
from functools import *</p>
  </li>
</ul>

<p>def intersect(*ar):
    return reduce(__intersectSC,ar)</p>

<p>def __intersectSC(listX, listY):
    setList = []
    for x in listX:
        if x in listY:
            setList.append(x)
    return setList</p>

<p>def difference(<em>ar):
    setList = []
    intersectSet = intersect(</em>ar)
    unionSet = union(*ar)
    for x in unionSet:
        if not x in intersectSet:
            setList.append(x)
    return setList</p>

<p>def union(*ar):
    setList = []
    for item in ar:
        for x in item:
            if not x in setList:
                setList.append(x)
    return setList</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Module Importing Style
  - import simpleset
    - get from global namespace, get all functions
    - check with command like dir()
  - from simpleset import union
    - specific functions, ex) union function Only
    - check with command like dir(union)
  - from simpleset import * 
    - all functions, except the function start with __(double-underlined)
    - check with command like dir()
  - import simpleset as test1
    - make alias named as test1

### `__pycache__` folder
- After compile a pyc file, it is generated in `__pycache__`, as well we can share this file to others as a module, not to show the source code.
Pyinstaller is useful for this case :
  - pip3 install pyinstaller
  - python BankAccout.py
  - BankAccount in 'dist' folder


### Exception
</code></pre></div></div>
<p>def divide(a,b):
    return a/b</p>

<p>try:
    c = divide(5, 2)
except ZeroDivisionError:
    print(‘0 is not allowed’)
except TypeError:
    print(“All parameters must be numbers”)
except:
    print(“Not defined”)
else:
    print(“Result : {0}”, c)</p>

<p>finally:
    print(“do anything”)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
### Input and Output
- Output
</code></pre></div></div>
<p>import sys</p>

<p>f = open(“C:\work\test.txt”, “wt”)
print(“file write”, file=f)
f.close()</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- read() : returns string all from a file
- readline() : returns string line by line
- readlines() : returns a list with line by line at once

</code></pre></div></div>
<blockquote>
  <blockquote>
    <blockquote>
      <p>f = open(“c:\work\demo.txt”)
result = f.read()
result
‘qqqq\nabcd\n1234\n’
print(result)
qqqq
abcd
1234</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>f.tell()
25
f.seek(0)
0
f.tell()
0
f.readline()
‘qqqq\n’
f.readline()
‘abcd\n’
f.readline()
‘1234\n’
f.seek(0)
0
lst = f.readlines()
lst
[‘qqqq\n’, ‘abcd\n’, ‘1234\n’]</p>
      <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Input
</code></pre></div>      </div>
      <p>f = open(“c:\work\demo1.txt”, “wt”)
f.write(“qqqq\nabcd\n1234\n”)
f.close()
```</p>
    </blockquote>
  </blockquote>
</blockquote>

<h3 id="pickle">Pickle</h3>
<ul>
  <li>Save information temporarily</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import pickle

colors = ["red", "blue", "gree"]

# Write
f = open("c:\\work\\colors","wb") # write binary
pickle.dump(colors,f) # back up with .dump function
f.close()

# Read
f = open("c:\\work\\colors","rb") # read binary
colors = pickle.load(f) # open with .load function
print(colors)
f.close()

del colors # delete list

import os 
os.remove("c:\\work\\colors")  # delete file
</code></pre></div></div>

<h3 id="regular-expression">Regular Expression</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import re 

f=open('c:\\work\\PV3.txt','rt')
g=open('c:\\work\\PV3_copy.txt','wt')

 
line = f.readline()
while (line != ''):
    if (re.search("\d{4}", line)):
        g.write(line + "\n")
    line = f.readline()

f.close() 
g.close()
</code></pre></div></div>

<h3 id="time-math-and-random">Time, Math and Random</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.random()
0.35173868090650484
&gt;&gt;&gt; random.random()
0.5306281074635111
&gt;&gt;&gt; random.uniform(3,4) 
3.5888882103413913
&gt;&gt;&gt; for i in range(3):  
 random.gauss(1, 1.0)

 
0.9384305864119867
1.8460570340312912
1.3857190077793522
&gt;&gt;&gt; [random.randrange(20) for i in range(10)] 
[12, 2, 4, 11, 2, 15, 7, 13, 17, 15]
&gt;&gt;&gt; random.sample(range(20), 10) 
[8, 6, 0, 7, 2, 4, 10, 11, 12, 18]

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.random()
0.35173868090650484
&gt;&gt;&gt; random.random()
0.5306281074635111
&gt;&gt;&gt; random.uniform(3,4) 
3.5888882103413913
&gt;&gt;&gt; for i in range(3):  
 random.gauss(1, 1.0)

 
0.9384305864119867
1.8460570340312912
1.3857190077793522
&gt;&gt;&gt; [random.randrange(20) for i in range(10)] 
[12, 2, 4, 11, 2, 15, 7, 13, 17, 15]
&gt;&gt;&gt; random.sample(range(20), 10) 
[8, 6, 0, 7, 2, 4, 10, 11, 12, 18]
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.random()
0.35173868090650484
&gt;&gt;&gt; random.random()
0.5306281074635111
&gt;&gt;&gt; random.uniform(3,4) 
3.5888882103413913
&gt;&gt;&gt; for i in range(3):  
 random.gauss(1, 1.0)

 
0.9384305864119867
1.8460570340312912
1.3857190077793522
&gt;&gt;&gt; [random.randrange(20) for i in range(10)] 
[12, 2, 4, 11, 2, 15, 7, 13, 17, 15]
&gt;&gt;&gt; random.sample(range(20), 10) 
[8, 6, 0, 7, 2, 4, 10, 11, 12, 18]
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.random()
0.35173868090650484
&gt;&gt;&gt; random.random()
0.5306281074635111
&gt;&gt;&gt; random.uniform(3,4) 
3.5888882103413913
&gt;&gt;&gt; for i in range(3):  
 random.gauss(1, 1.0)

 
0.9384305864119867
1.8460570340312912
1.3857190077793522
&gt;&gt;&gt; [random.randrange(20) for i in range(10)] 
[12, 2, 4, 11, 2, 15, 7, 13, 17, 15]
&gt;&gt;&gt; random.sample(range(20), 10) 
[8, 6, 0, 7, 2, 4, 10, 11, 12, 18]
</code></pre></div></div>
<h3 id="os">OS</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; from os.path import *
&gt;&gt;&gt; abspath('tmp')  
'C:\\Python35\\tmp'
&gt;&gt;&gt; basename('c:\\python35\\tmp')  
'tmp'
&gt;&gt;&gt; basename('c:\\python35\\tmp\\test.txt')
'test.txt'
&gt;&gt;&gt; commonprefix(['c:\\python35\\lib', 'c:\\python35\tools', 'c:\\python35']) 
'c:\\python35'
&gt;&gt;&gt; exists('c:\\python35\\tmp') 
False
&gt;&gt;&gt; exists('c:\\python35')
True
&gt;&gt;&gt; getsize('c:\\python35\\python.exe') 
26624
&gt;&gt;&gt; isfile('c:\\python35\\python.exe') 
True
</code></pre></div></div>

:ET