I"p@<p><img src="/assets/images/awsec2.png" alt="example" /></p>

<blockquote>
  <p>AWS EC2 서버에서의 서비스를 위해 임대부터 설치까지의 과정을 정리하고자 합니다. <code class="language-plaintext highlighter-rouge">Django</code> 기준으로 작성하였으며 원격 서버 구축에 놓치기 쉬운 설정들을 나열하였습니다. (<code class="language-plaintext highlighter-rouge">https://aws.amazon.com/</code>)</p>
</blockquote>

<hr />

<h3 id="requirementstxt-파일-생성하기"><code class="language-plaintext highlighter-rouge">requirements.txt</code> 파일 생성하기</h3>
<p>서버에서 설치하기 위한 패키지들을 <code class="language-plaintext highlighter-rouge">requirements.txt</code> 에 저장하여  서버에서 간단히 설치할 수 있습니다. manage.py 가 있는 폴더에서 아래와 같이 입력합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip freeze <span class="o">&gt;&gt;</span> requirements.txt
</code></pre></div></div>
<p>이후 현재 활성화된 가상환경에 설치된 패키지의 목록을 <code class="language-plaintext highlighter-rouge">requirements.txt</code> 에 저장할 수 있으며, 아래 명령어로 내용을 확인할 수 있습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>requirements.txt
</code></pre></div></div>

<h3 id="aws-ec2-임대하기">AWS EC2 임대하기</h3>
<ul>
  <li>로그인 후, 상단의 <code class="language-plaintext highlighter-rouge">서비스</code> 메뉴를 클릭한 뒤 <code class="language-plaintext highlighter-rouge">EC2</code> 를 검색하여 들어갑니다.</li>
  <li>우측 상단의 리전선택에서 <code class="language-plaintext highlighter-rouge">서울</code> 을 선택합니다.</li>
  <li>좌측 메뉴의 <code class="language-plaintext highlighter-rouge">인스턴스</code> 에 들어가 시작을 눌러줍니다.</li>
  <li>이미지 선택에서 <code class="language-plaintext highlighter-rouge">Ubuntu Server 18.04 LTS</code> 를 선택합니다.</li>
  <li>인스턴스 유형에서 <code class="language-plaintext highlighter-rouge">프리티어</code> 를 선택하면 되는데, 이는 신규 가입자가 1년간 일정할당량을 무료로 사용할 수 있는 서비스로 연습용으로는 적합합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">인스턴스 시작</code> 을 눌러줍니다.
이후 <code class="language-plaintext highlighter-rouge">키 페어</code> 설정 창이 나오는데, 이는 EC2 서버에 원격으로 접속하기 위한 일종의 열쇠라고 이해하시면 되며, 키페어 이름 입력 후 다운로드를 클릭하면 됩니다.</li>
  <li>노란불과 함께 시작하게 되면 다소 시간이 걸리니 기다려 주시면 됩니다.</li>
  <li>
    <p>다운로드 된 키페어(pem) 를 <code class="language-plaintext highlighter-rouge">.ssh</code> 폴더에 옯깁니다. 외부 컴퓨터와 원격 통신시 <code class="language-plaintext highlighter-rouge">.ssh</code> 폴더의 키페어를 사용하게 됩니다. 이후 옮겨졌는지 확인합니다.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span><span class="nb">mkdir</span> ~/ .ssh/
  <span class="nv">$ </span><span class="nb">mv</span> ~/Downloads/deploy_test.pem ~/.ssh/

  <span class="nv">$ </span><span class="nb">ls</span> ~/.ssh/
  deploy_test.pem
</code></pre></div>    </div>
  </li>
  <li>
    <p>이후 키페어 파일의 권한을 소유주만 읽을 수 있도록 설정을 변경합니다. <code class="language-plaintext highlighter-rouge">chmod</code> 명령어를 사용하여 읽기, 쓰기, 실행 권한 등을 변경할 수 있습니다.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$chmod</span> 400 ~/.ssh/deploy_test.pem
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="aws-ec2-서버에-원격-접속하기">AWS EC2 서버에 원격 접속하기</h3>
<p>배포 전 프로젝트 파일을 원격 서버에 옮기기 위해서는 EC2 서버에 접속해야 합니다. 접속하기 위해서는 <code class="language-plaintext highlighter-rouge">pem</code> 파일이 필요하여 아래와 같이 원격 접속을 할 수 있습니다.
윈도우 환경에서는 <code class="language-plaintext highlighter-rouge">git bash</code> 와 같은 cmd 프로그램을 이용하면 수월하게 진행할 수 있습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh <span class="nt">-i</span> <span class="o">[</span>키페어경로] <span class="o">[</span>유저이름]@[퍼블릭DNS주소]
</code></pre></div></div>

<p>위의 <code class="language-plaintext highlighter-rouge">유저이름</code> 과 <code class="language-plaintext highlighter-rouge">퍼블릭DNS주소</code> 는 인스턴스 창에서 확인할 수 있습니다.</p>

<ul>
  <li>만약 접속 시 아래와 같은 에러가 발생하면 위의 <code class="language-plaintext highlighter-rouge">chmod 400</code> 을 적용하였는지 확인하시면 됩니다.
<code class="language-plaintext highlighter-rouge">"WARNING:UNPROTECTED PRIVATE KEY FILE!"</code></li>
</ul>

<h3 id="aws-ec2-서버-초기-세팅하기">AWS EC2 서버 초기 세팅하기</h3>

<ul>
  <li>
    <p>임대한 원격서버의 기본 패키지들을 설치합니다. 이전으 ㅣ원격으로 접속한 후에 패키지 정보를 업데이트 합ㄴ디ㅏ.
<code class="language-plaintext highlighter-rouge">$ sudo apt-get update</code>
뭔가를 물어보는 팝업창이 나타나면 Y 를 클릭하시면 됩니다.</p>
  </li>
  <li>
    <p>이후 패키지 의존성 검사 및 업그레이드를 진행합니다.
``$ sudo apt-get dist-upgrade`</p>
  </li>
  <li>
    <p>이후 python3 패키지 매니저(pip3) 를 설치합니다.
<code class="language-plaintext highlighter-rouge">$ sudo apt-get install python3-pip</code></p>
  </li>
</ul>

<h3 id="프로젝트를-github-에-업로드하기">프로젝트를 github 에 업로드하기</h3>
<p>원격서버에 프로젝트를 옮기기 위해서는 filezilla 와 같은 다양한 프로그램들이 있지만 형상관리를 수월하게 할 수 있는 <code class="language-plaintext highlighter-rouge">github</code> 를 사용하는 것을 권장합니다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Create a new repository</code> 를 클릭한 수 프로젝트 명을 입력하고 생성합니다.</li>
  <li>
    <p>로컬에서 프로젝트의 <code class="language-plaintext highlighter-rouge">manage.py</code> 아 있는 곳으로 이동하여 <code class="language-plaintext highlighter-rouge">.git</code> 폴더을 생성하고 여기에 프로젝트 소스들을 담아 github 에 올리도록 합니다.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>git init  <span class="c"># git 을 초기화 함</span>
  <span class="nv">$ </span>git add <span class="nb">.</span> <span class="c"># 현재 폴더 전체를 담는다.</span>
  <span class="nv">$ </span>git remote add origin <span class="o">[</span>레포리토리주소] <span class="c"># 레포지토리주소를 `origin` 이라는 이름으로 추가한다.</span>
  <span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"first commit"</span> <span class="c"># 변경사항을 모으로 메시지를 입력한다.</span>
  <span class="nv">$ </span>git push origin master <span class="c"># origin 이라는 이름의 레포지토리 주소로 업로드 한다.</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>이후 변경 사항에 대한 업로드 시에는 아래와 같이 진행할 수 있습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add <span class="nb">.</span>
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"코멘트"</span>
<span class="nv">$ </span>git push origin master
</code></pre></div></div>

<h3 id="ec2-서버에서-프로젝트-가져오기">EC2 서버에서 프로젝트 가져오기</h3>
<p><code class="language-plaintext highlighter-rouge">github</code> 에 있는 프로젝트를 서버로 옮기기 위해 <code class="language-plaintext highlighter-rouge">git clone</code> 명령어를 사용합니다. 먼저 원격 서버에 접속한 후 아래와 같이 진행합니다.</p>

<ul>
  <li>
    <p>프로젝트 파일을 담을 <code class="language-plaintext highlighter-rouge">/srv/</code> 폴더의 소유권을 변경합니다. 여기서 ‘<code class="language-plaintext highlighter-rouge">ubuntu</code>의 의미는 현재 유저를 가리킵니다.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span><span class="nb">sudo chown</span> <span class="nt">-R</span> ubuntu:ubuntu /srv/

  <span class="c">#소유권 변경 확인 위해 루트 폴더(/) 로 이동한 뒤 아래와 같이 확인합니다.</span>
  <span class="nv">$ </span><span class="nb">cd</span> /
  <span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">/srv/</code> 폴더로 이동하여 github 내 프로젝트를 받아옵니다.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span><span class="nb">cd</span> /srv
  <span class="nv">$ </span>git clone <span class="o">[</span>레포지토리주소]

  <span class="c"># 이후 ls 명령어를 통해 레포지토리 이름과 동일한 폴더가 생성되었다면 성공입니다.</span>

  <span class="nv">$ </span><span class="nb">ls</span>

</code></pre></div>    </div>
  </li>
</ul>

<h2 id="aws-ec2---panabara-정보">AWS EC2 - panabara 정보</h2>

<p>백업 인스턴스 키페이 이름 : deploy_test</p>

<p>i-0b343e4ef075e80b1 (PanabaraServer)에 대한 인스턴스 요약 정보
less than a minute 전에 업데이트됨</p>

<p>연결
인스턴스 상태
작업
인스턴스 ID
 i-0b343e4ef075e80b1 (PanabaraServer)
퍼블릭 IPv4 주소
–
프라이빗 IPv4 주소
 172.31.33.127
IPv6 주소
–
인스턴스 상태
 중지됨
퍼블릭 IPv4 DNS
–
호스트 이름 유형
–
프라이빗 IP DNS 이름(IPv4만 해당)
 ip-172-31-33-127.ap-northeast-2.compute.internal
프라이빗 리소스 DNS 이름 응답
–
인스턴스 유형
t2.micro
탄력적 IP 주소
–
VPC ID
 vpc-47912b2c 
AWS Compute Optimizer 찾기
권장 사항을 위해 AWS Compute Optimizer에 옵트인합니다. | 자세히 알아보기 
IAM 역할
–
서브넷 ID
 subnet-e6f7efaa 
세부 정보
보안
네트워킹
스토리지
상태 검사
모니터링
태그
인스턴스 세부 정보 정보
플랫폼
 Ubuntu(추론)
AMI ID
 ami-0e67aff698cb24c1d
모니터링
비활성
플랫폼 세부 정보
 Linux/UNIX
AMI 이름
 ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-20201026
종료 방지
비활성
시작 시간
 Thu Feb 04 2021 21:55:14 GMT+0900 (한국 표준시) (10 months)
AMI 위치
 099720109477/ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-20201026
수명 주기
정상
중지-최대 절전 모드 동작
비활성
AMI 시작 인덱스
0
키 페어 이름
 deploy_test
상태 전환 이유
User initiated (2021-12-09 11:37:18 GMT)
크레딧 사양
standard
커널 ID
–
상태 전환 메시지
 Client.UserInitiatedShutdown: User initiated shutdown
사용 작업
 RunInstances
RAM 디스크 ID
–
소유자
 061948663039
Enclaves Support
–
부트 모드
–
RBN을 게스트 OS 호스트 이름으로 사용
 비활성
RBN DNS 호스트 이름 IPv4 응답
 비활성
호스트 및 배치 그룹 정보
호스트 ID
–
선호도
–
배치 그룹
–
호스트 리소스 그룹 이름
–
테넌시
 default
파티션 번호
–
가상화 유형
 hvm
예약
 r-0d7f9d45b7aad6396
vCPU 수
1
용량 예약 정보
용량 예약 ID
–
용량 예약 설정
open
액셀러레이터 정보
Elastic inference accelerator ID
–</p>

<p>세부 정보
보안
네트워킹
스토리지
상태 검사
모니터링
태그
보안 세부 정보
IAM 역할
–
소유자 ID
 061948663039
시작 시간
Thu Feb 04 2021 21:55:14 GMT+0900 (한국 표준시)
보안 그룹
sg-00bd22a85c39828c9 (launch-wizard-1)
인바운드 규칙
필터 규칙</p>

<p>1</p>

<p>보안 그룹 규칙 ID
포트 범위
프로토콜
원본
보안 그룹
sgr-0a7a3d3bddd3d8a63	80	TCP	0.0.0.0/0	launch-wizard-1
sgr-07187fcc5c9001bb6	22	TCP	0.0.0.0/0	launch-wizard-1
sgr-04fd273c94b0643ae	8080	TCP	0.0.0.0/0	launch-wizard-1
아웃바운드 규칙
필터 규칙</p>

<p>1</p>

<p>보안 그룹 규칙 ID
포트 범위
프로토콜
대상
보안 그룹
sgr-09aa698aef5782c2e	전체	전체	0.0.0.0/0	launch-wizard-1</p>

<p>인스턴스 ID
 i-0b343e4ef075e80b1 (PanabaraServer)
퍼블릭 IPv4 주소
–
프라이빗 IPv4 주소
 172.31.33.127
IPv6 주소
–
인스턴스 상태
 중지됨
퍼블릭 IPv4 DNS
–
호스트 이름 유형
–
프라이빗 IP DNS 이름(IPv4만 해당)
 ip-172-31-33-127.ap-northeast-2.compute.internal
프라이빗 리소스 DNS 이름 응답
–
인스턴스 유형
t2.micro
탄력적 IP 주소
–
VPC ID
 vpc-47912b2c 
AWS Compute Optimizer 찾기
권장 사항을 위해 AWS Compute Optimizer에 옵트인합니다. | 자세히 알아보기 
IAM 역할
–
서브넷 ID
 subnet-e6f7efaa 
세부 정보
보안
네트워킹
스토리지
상태 검사
모니터링
태그
이제 Reachability Analyzer를 사용하여 네트워크 연결을 확인할 수 있습니다.
Reachability Analyzer 실행</p>

<p>네트워킹 세부 정보 정보
퍼블릭 IPv4 주소
–
프라이빗 IPv4 주소
 172.31.33.127
VPC ID
 vpc-47912b2c 
퍼블릭 IPv4 DNS
–
프라이빗 IP DNS 이름(IPv4만 해당)
 ip-172-31-33-127.ap-northeast-2.compute.internal
서브넷 ID
 subnet-e6f7efaa 
IPV6 주소
–
보조 프라이빗 IPv4 주소
–
가용 영역
 ap-northeast-2c
통신 사업자 IP 주소(임시)
–
Outpost ID
–
RBN을 게스트 OS 호스트 이름으로 사용
 비활성
RBN DNS 호스트 이름 IPv4 응답
 비활성
네트워크 인터페이스 정보
네트워크 인터페이스 (1)
네트워크 인터페이스 필터링
인터페이스 ID
설명
IPv4 접두사
IPv6 접두사
퍼블릭 IPv4 주소
프라이빗 IPv4 주소
프라이빗 IPv4 DNS
IPv6 주소
연결 시간
인터페이스 소유자
연결 상태
VPC ID
서브넷 ID
종료 시 삭제
소스/대상 확인
보안 그룹
인터페이스 유형
eni-069b59ee0757734f5	–	–	–	–	172.31.33.127	ip-172-31-33-127.ap-northeast-2.compute.internal	–	Wed Feb 03 2021 22:07:23 GMT+0900 (한국 표준시) (10 months)	061948663039	attached	 vpc-47912b2c 	 subnet-e6f7efaa 	활성	활성	 sg-00bd22a85c39828c9 (launch-wizard-1)	Elastic network interface
탄력적 IP 주소 정보
탄력적 IP 주소 (0)
탄력적 IP 주소 필터링</p>

<p>루트 디바이스 세부 정보
루트 디바이스 이름
 /dev/sda1
루트 디바이스 유형
EBS
EBS 최적화
비활성
블록 디바이스
블록 디바이스 필터링
볼륨 ID
디바이스 이름
볼륨 크기(GiB)
연결 상태
연결 시간
암호화됨
KMS 키 ID
종료 시 삭제
vol-0b2718fbcbf6438b2	/dev/sdf	8	
 연결됨
Thu Dec 09 2021 21:17:59 GMT+0900 (한국 표준시)	아니요	–	아니요
최근 루트 볼륨 대체 작업
루트 볼륨 대체</p>

<p>작업 필터링
작업 ID
작업 상태
시작 시간
완료 시간
태그
최근 루트 볼륨 대체 작업 없음</p>

<p>Route 53
호스팅 영역
호스팅 영역 (1)
Automatic 모드는 최상의 필터 결과에 최적화된 현재 검색 동작입니다. 모드를 변경하려면 설정(settings)으로 이동합니다.</p>

<p>세부 정보 보기
편집
삭제
호스팅 영역 생성
속성 또는 값을 기준으로 호스팅 영역 필터링</p>

<p>1</p>

<p>도메인 이름
유형
생성자
레코드 수
설명
호스팅 영역 ID</p>

<p>panabara.com	퍼블릭	Route 53	4	panabara.com	Z0053300HHWU32XNN9LD</p>
:ET